
2385. Amount of Time for Binary Tree to Be Infected

My Code->

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root, int start, int &result){
        if(root==NULL){
            return 0;
        }

        int left= solve(root->left, start, result);
        int right= solve(root->right, start, result);

        if(root->val==start){
            result=max(left,right);
            return -1;
        }else if(left>=0 && right>=0){
            return max(left,right)+1;
        }else{
            int distance=abs(left)+abs(right);
            result=max(distance,result);

            return min(left,right)-1;
        }
        return 0;

    }

    int amountOfTime(TreeNode* root, int start) {
        int ans=INT_MIN;
        solve(root,start, ans);
           return ans;
        
    }
};
