2002. Maximum Product of the Length of Two Palindromic Subsequences
My Code->
  class Solution {
public:
    int lps(string& s) {
          if( s.size() == 1 ) return 1;
        int n = s.size();
        int dp[n][n];
        memset(dp,0,sizeof(dp));
        
        for(int i = 0; i < n; i++) dp[i][i]=1;
         
        for(int i = 1; i < n; i++){
            for(int j = 0,k = i; j < n-i; j++){
                k = i+j;
                if( s[j] == s[k] )
                    dp[j][k] = dp[j+1][k-1]+2;
                else
                    dp[j][k] = max(dp[j][k-1],dp[j+1][k]);
            }
        }
        
        return dp[0][n-1];
    }
    int maxProduct(string s) 
    {
        int ans=0;
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        for(int i = 1; i < pow(2,n-1); i++){
            string s1 = "", s2 = "";
            for(int j = 0; j < n; j++){
                if( i & 1<<j ) s1+=s[j];
                else s2+=s[j];
            }
            ans=max(ans,lps(s1)*lps(s2));
        }
        return ans;
        
    }
};
