1248. Count Number of Nice Subarrays
My Code->

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        for (auto& it : nums) {
            if (it % 2 == 0) {
                it = 0;
            } else {
                it = 1;
            }
        }
        unordered_map<int, int> mp;
        mp[0] = 1;

        int cumSum = 0;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            cumSum += nums[i];
            int targ = cumSum - k;
            if (mp.find(targ) != mp.end()) {
                ans += mp[targ];
            }
            mp[cumSum]++;
        }
        return ans;
    }
};

__________________________________________________________________________________________________________________________________________________________________________
 Method 2-> using Sliding Window
    class Solution {
public:
    int sw(vector<int>& nums, int k){
        int i=0;
        int j=0;
        int n=nums.size();
        int count_zeros=0;
        int winSum=0;
        int ans=0;
        while(j<n){
            winSum+=nums[j];
           while((winSum>k || nums[i]==0) &&i<n ){
            if(nums[i]==0){
                count_zeros++;
            }else{
                count_zeros=0;
            }
            winSum-=nums[i];
            i++;
           }
            if(winSum==k){
            ans+=1+count_zeros;
            }
            j++;
        }
        return ans;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        
        for (auto& it : nums) {
            if (it % 2 == 0) {
                it = 0;
            } else {
                it = 1;
            }
        }
        return sw(nums,k);
      
    }
};


Try solving these question for better understanding :
Leetcode 560 and Leetcode 930
